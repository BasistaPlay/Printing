# Generated by Django 4.2.7 on 2023-11-12 00:03

import colorfield.fields
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('home', '0006_product_button_color'),
    ]

    operations = [
        migrations.AlterField(
            model_name='product',
            name='background_color',
            field=colorfield.fields.ColorField(default='#FFFFFF', help_text='Izvēlieties fona krāsu.', image_field=None, max_length=25, samples=None, verbose_name='Color'),
        ),
        migrations.AlterField(
            model_name='product',
            name='background_color_2',
            field=colorfield.fields.ColorField(default='#FFFFFF', help_text='Izvēlieties otrā fona krāsu.', image_field=None, max_length=25, samples=None, verbose_name='Color'),
        ),
        migrations.AlterField(
            model_name='product',
            name='button_color',
            field=colorfield.fields.ColorField(blank=True, default='', help_text='Izvēlieties pogas fona krāsu.', image_field=None, max_length=25, samples=None, verbose_name='Color'),
        ),
        migrations.AlterField(
            model_name='product',
            name='button_title',
            field=models.CharField(help_text='Ievadiet pogas nosaukumu.', max_length=100),
        ),
        migrations.AlterField(
            model_name='product',
            name='button_title_en',
            field=models.CharField(help_text='Ievadiet pogas nosaukumu.', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='button_title_lv',
            field=models.CharField(help_text='Ievadiet pogas nosaukumu.', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='description',
            field=models.TextField(help_text='Ievadiet detalizētu aprakstu par produktu.'),
        ),
        migrations.AlterField(
            model_name='product',
            name='description_en',
            field=models.TextField(help_text='Ievadiet detalizētu aprakstu par produktu.', null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='description_lv',
            field=models.TextField(help_text='Ievadiet detalizētu aprakstu par produktu.', null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='image',
            field=models.ImageField(help_text='Ievadiet detalizētu aprakstu par produktu.', upload_to='products/'),
        ),
        migrations.AlterField(
            model_name='product',
            name='link',
            field=models.URLField(blank=True, help_text='Ievadiet saiti, uz kuru vedīs poga (ja nepieciešams).'),
        ),
        migrations.AlterField(
            model_name='product',
            name='moto',
            field=models.CharField(help_text='Ievadiet produktam saistīto moto vai saukli.', max_length=200),
        ),
        migrations.AlterField(
            model_name='product',
            name='moto_en',
            field=models.CharField(help_text='Ievadiet produktam saistīto moto vai saukli.', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='moto_lv',
            field=models.CharField(help_text='Ievadiet produktam saistīto moto vai saukli.', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='title',
            field=models.CharField(help_text='Ievadiet produkta nosaukumu.', max_length=100, unique=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='title_en',
            field=models.CharField(help_text='Ievadiet produkta nosaukumu.', max_length=100, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='title_lv',
            field=models.CharField(help_text='Ievadiet produkta nosaukumu.', max_length=100, null=True, unique=True),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
